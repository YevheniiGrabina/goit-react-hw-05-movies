{"version":3,"file":"static/js/679.9548b257.chunk.js","mappings":"6LAAO,IAAMA,EAAW,kCACXC,EAAU,oC,sMCCRC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,yGAAsCC,EAAtC,+BAA4C,GAA5C,SACyBC,MAAMD,GAD/B,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOT,EAAuB,2DAAD,OACgCD,EAAAA,IAIxD,SAASW,EAAUC,GACxB,OAAOX,EAAuB,qDAAD,OAC0BD,EAAAA,EAD1B,kBAC2CY,IAInE,SAASC,EAAgBC,GAC9B,OAAOb,EAAuB,sCAAD,OACWa,EADX,oBAC8Bd,EAAAA,IAItD,SAASe,EAAQD,GACtB,OAAOb,EAAuB,sCAAD,OACWa,EADX,4BACsCd,EAAAA,IAI9D,SAASgB,EAAWF,GACzB,OAAOb,EAAuB,sCAAD,OACWa,EADX,4BACsCd,EAAAA,EADtC,c,kHCjC/B,EAA2B,uBAA3B,EAAyD,mBAAzD,EAAwF,wB,SCmCxF,EA9Ba,WACX,IAAQc,GAAYG,EAAAA,EAAAA,MAAZH,QACR,GAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAKA,OAJAC,EAAAA,EAAAA,YAAU,YACRN,EAAAA,EAAAA,IAAQD,GAASQ,MAAK,SAAAC,GAAQ,OAAIH,EAAQG,EAASJ,WAClD,CAACL,KAGF,8BACGK,EAAKK,OAAS,GACb,wBACGL,EAAKM,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,cAAeC,EAA3B,EAA2BA,UAAWC,EAAtC,EAAsCA,aAAtC,OACR,yBACE,iBAAKC,UAAWC,EAAhB,WACE,gBAAKC,IAAG,UAAKjC,EAAAA,GAAL,OAAgB8B,GAAgBI,IAAKN,KAC7C,cAAGG,UAAWC,EAAd,SAAuBJ,KACvB,eAAGG,UAAWC,EAAd,WACE,0CACCH,SANEF,SAab","sources":["Api/const.jsx","services/fetchAPI.jsx","webpack://react-homework-template/./src/views/Cast/Cast.module.css?f355","views/Cast/Cast.jsx"],"sourcesContent":["export const IMG_PATH = 'https://image.tmdb.org/t/p/w500';\nexport const API_KEY = '313ffdff82053e0e29100a2fb4b2d3e5';","import { API_KEY } from '../Api/const';\n\nasync function fetchWithErrorHandling(url = '') {\n  const response = await fetch(url);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not Found'));\n}\n\nexport function getTrandingMovie() {\n  return fetchWithErrorHandling(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n\nexport function findMovie(query) {\n  return fetchWithErrorHandling(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n}\n\nexport function getMovieDetails(movieId) {\n  return fetchWithErrorHandling(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`\n  );\n}\n\nexport function getCast(movieId) {\n  return fetchWithErrorHandling(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n}\n\nexport function getReviews(movieId) {\n  return fetchWithErrorHandling(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&page=1`\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"castCard\":\"Cast_castCard__9eci8\",\"name\":\"Cast_name__1PqOC\",\"character\":\"Cast_character__8TC1h\"};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getCast } from '../../services/fetchAPI';\nimport { IMG_PATH } from '../../Api/const';\nimport s from './Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    getCast(movieId).then(dataCast => setCast(dataCast.cast));\n  }, [movieId]);\n\n  return (\n    <>\n      {cast.length > 0 ? (\n        <ul>\n          {cast.map(({ cast_id, original_name, character, profile_path }) => (\n            <li key={cast_id}>\n              <div className={s.castCard}>\n                <img src={`${IMG_PATH}${profile_path}`} alt={original_name} />\n                <p className={s.name}>{original_name}</p>\n                <p className={s.character}>\n                  <span>Character: </span>\n                  {character}\n                </p>\n              </div>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No cast find</p>\n      )}\n    </>\n  );\n};\nexport default Cast;"],"names":["IMG_PATH","API_KEY","fetchWithErrorHandling","url","fetch","response","ok","json","Promise","reject","Error","getTrandingMovie","findMovie","query","getMovieDetails","movieId","getCast","getReviews","useParams","useState","cast","setCast","useEffect","then","dataCast","length","map","cast_id","original_name","character","profile_path","className","s","src","alt"],"sourceRoot":""}