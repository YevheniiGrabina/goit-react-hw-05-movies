{"version":3,"file":"static/js/262.5355df41.chunk.js","mappings":"6LAAO,IAAMA,EAAW,kCACXC,EAAU,oC,sMCCRC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,yGAAsCC,EAAtC,+BAA4C,GAA5C,SACyBC,MAAMD,GAD/B,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOT,EAAuB,2DAAD,OACgCD,EAAAA,IAIxD,SAASW,EAAUC,GACxB,OAAOX,EAAuB,qDAAD,OAC0BD,EAAAA,EAD1B,kBAC2CY,IAInE,SAASC,EAAgBC,GAC9B,OAAOb,EAAuB,sCAAD,OACWa,EADX,oBAC8Bd,EAAAA,IAItD,SAASe,EAAQD,GACtB,OAAOb,EAAuB,sCAAD,OACWa,EADX,4BACsCd,EAAAA,IAI9D,SAASgB,EAAWF,GACzB,OAAOb,EAAuB,sCAAD,OACWa,EADX,4BACsCd,EAAAA,EADtC,c,4EC9BzBiB,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,gCA6C9B,UA3CkB,WAChB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMZ,EAAQW,EAAaE,IAAI,SAC/B,GAAsCN,EAAAA,EAAAA,UAAQ,OAACP,QAAD,IAACA,EAAAA,EAAS,IAAxD,eAAOc,EAAP,KAAoBC,EAApB,KAgBA,OALAC,EAAAA,EAAAA,YAAU,WACHhB,IACLD,EAAAA,EAAAA,IAAUC,GAAOiB,MAAK,SAAAT,GAAM,OAAIC,EAAUD,EAAOU,cAChD,CAAClB,KAGF,iCACE,kBAAMmB,SAZO,SAAAC,GACfA,EAAEC,iBACFT,EAAgB,CAAEZ,MAAOc,EAAYQ,cAAcC,UAUjD,WACE,kBACEC,SAlBS,SAAAJ,GACfL,EAAeK,EAAEK,cAAcC,QAkBzBA,MAAOZ,EACPa,KAAK,cACLC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,sBAEd,mBAAQH,KAAK,SAAb,UACE,2CAGJ,SAAC,EAAAI,SAAD,CAAUC,UAAU,wCAApB,SACGzB,EAAO0B,OAAS,IAAK,SAAC7B,EAAD,CAAYG,OAAQA","sources":["Api/const.jsx","services/fetchAPI.jsx","views/MoviesView.jsx"],"sourcesContent":["export const IMG_PATH = 'https://image.tmdb.org/t/p/w500';\nexport const API_KEY = '313ffdff82053e0e29100a2fb4b2d3e5';","import { API_KEY } from '../Api/const';\n\nasync function fetchWithErrorHandling(url = '') {\n  const response = await fetch(url);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not Found'));\n}\n\nexport function getTrandingMovie() {\n  return fetchWithErrorHandling(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n\nexport function findMovie(query) {\n  return fetchWithErrorHandling(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n}\n\nexport function getMovieDetails(movieId) {\n  return fetchWithErrorHandling(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`\n  );\n}\n\nexport function getCast(movieId) {\n  return fetchWithErrorHandling(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n}\n\nexport function getReviews(movieId) {\n  return fetchWithErrorHandling(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&page=1`\n  );\n}","import { useState, useEffect, lazy, Suspense } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { findMovie } from '../services/fetchAPI';\n\nconst MoviesList = lazy(() => import('../components/MoviesList'));\n\nconst MovieView = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const [searchQuery, setSearchQuery] = useState(query ?? '');\n\n  const onChange = e => {\n    setSearchQuery(e.currentTarget.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query: searchQuery.toLowerCase().trim() });\n  };\n\n  useEffect(() => {\n    if (!query) return;\n    findMovie(query).then(movies => setMovies(movies.results));\n  }, [query]);\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input\n          onChange={onChange}\n          value={searchQuery}\n          name=\"searchQuery\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Enter movie name\"\n        />\n        <button type=\"submit\">\n          <span>Search</span>\n        </button>\n      </form>\n      <Suspense fallback={<div>Loading...</div>}>\n        {movies.length > 0 && <MoviesList movies={movies} />}\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieView;"],"names":["IMG_PATH","API_KEY","fetchWithErrorHandling","url","fetch","response","ok","json","Promise","reject","Error","getTrandingMovie","findMovie","query","getMovieDetails","movieId","getCast","getReviews","MoviesList","lazy","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","searchQuery","setSearchQuery","useEffect","then","results","onSubmit","e","preventDefault","toLowerCase","trim","onChange","currentTarget","value","name","type","autoComplete","autoFocus","placeholder","Suspense","fallback","length"],"sourceRoot":""}